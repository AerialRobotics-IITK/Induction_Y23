# excercise 2
- I first downloaded the smb_highlevel_controller zip file from the course website.
- After that I inspected :
cd ~/Downloads
unzip smb_highlevel_controller.zip
cd smb_highlevel_controller
cat CMakeLists.txt
cat package.xml
- Created a subscriber to the /scan topic :
nano smb_highlevel_controller_node.cpp
- then i coded the following :
#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
void scanCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
  ROS_INFO("Received a LaserScan message with %lu ranges", msg->ranges.size());
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "smb_highlevel_controller_node");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("scan", 1000, scanCallback);
  ros::spin();
  return 0;
}
- Added a parameter file with topic name and queue size for the subscriber of the topic
/scan:
nano smb_highlevel_controller_node.cpp
#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>

void scanCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
  ROS_INFO("Received a LaserScan message with %lu ranges", msg->ranges.size());
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "smb_highlevel_controller_node");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe("scan", 1000, scanCallback);

  ros::spin();

  return 0;
}
- Created a callback method for that subscriber which outputs the smallest distance
measurement from the vector ranges in the message of the laser scanner to the
terminal :
#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <limits>  // For std::numeric_limits

void scanCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
  // Initialize minimum range to the maximum possible float value
  float min_range = std::numeric_limits<float>::infinity();

  // Iterate through the range readings to find the minimum value
  for (const auto& range : msg->ranges) {
    if (range < min_range && range >= msg->range_min && range <= msg->range_max) {
      min_range = range;
    }
  }

  // Output the smallest distance measurement to the terminal
  ROS_INFO("Smallest distance measurement: %f", min_range);
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "smb_highlevel_controller_node");
  ros::NodeHandle nh;

  std::string scan_topic;
  int queue_size;

  nh.getParam("scan_topic", scan_topic);
  nh.getParam("queue_size", queue_size);

  ros::Subscriber sub = nh.subscribe(scan_topic, queue_size, scanCallback);

  ros::spin();

  return 0;
}
- Then i was not able to add the launch file for ex1 , figuring that out...
